Always use AthleteMenuLoaderView, GameMenuLoaderView, TeamMenuLoaderView etc when navigating to any menus (loader patterns may need to be created for other menus, if they donâ€™t already exist). 
Prioritize app performance, quick loading, quick processing, user experience, and comprehensive error handling, even if improving any of these things may require lengthier code, more work, data schema changes, or server side changes. 
Prioritize fixing bugs at the root cause. 
iOS 18+ features are ok. 
Ensure consistency across Swift models and database tables. 
Follow existing view patterns: The app uses separate view files for each major component (TeamMenuView, AthleteMenuView, etc.)
Use @StateObject for services like FirebaseService.shared and SimpleDataManager.shared
Implement retry logic for API calls with fetchWithRetry patterns (max 2 retries with exponential backoff)
Use async/await with proper error handling and MainActor.run for UI updates
Cache-first approach: Load from cache immediately, then refresh in background
Loading states: Always show ProgressView during data loading
Error handling: Display user-friendly error messages with retry options
Tab-based navigation: Use SegmentedPickerStyle() for content switching
Consistent spacing: Use 16-20pt spacing between major sections
Color scheme: Use .primary, .secondary for text hierarchy
Grid layouts: Use LazyVGrid with flexible columns for responsive design
Use YourServerAPI.shared for all server communication
Implement retry logic for network requests
Handle loading states and errors gracefully
Use SimpleDataManager for local caching
Views go in sports/Views/ with subdirectories by feature (Team/, Player/, Game/, etc.)
Models in sports/Models/
Services in sports/Services/
Components in sports/Views/Components/
Use @Binding for shared state between parent and child views
Implement task for async operations on view appearance
Use LazyVStack and LazyVGrid for performance with large lists
Always check for linting errors after making changes
Verify navigation flows work end-to-end. Only if prompted, test build with iOS Simulator iPhone 17. 
Test loading states and error conditions
Ensure consistent styling and interaction logic across similar components
Make suggestions if the instructed task or solution seems inefficient, inconsistent, or confusing. 
---
alwaysApply: true
---
